def version_matrix = [
<% @configs['version_pairs'].each do |version_pair| -%>
  [puppet: '<%= version_pair['puppet'] %>', ruby: '<%= version_pair['ruby'] %>', req: <%= version_pair['req'] %>],
<% end -%>
]
def additional_checks = [<%= @configs['additional_checks'].map { |check| "'#{check}'" }.join(', ') %>]

node {

  def baseDir = "${pwd()}/../workspace/${env.BUILD_NUMBER}"
  def moduleDir = "${env.JOB_NAME}".tokenize("/")[1]

  stage('Prepare') {
    parallel version_matrix.collect {["Ruby ${it.ruby} / Puppet ${it.puppet}", {
      dir("${baseDir}/puppet${it.puppet}_ruby${it.ruby}/${moduleDir}") {
        withEnv([ "PUPPET_GEM_VERSION=~> ${it.puppet}" ]) {
          checkout scm
          sh """#!/bin/bash -l
rm -f Gemfile.lock
rvm use ${it.ruby}@${env.BUILD_TAG}_puppet${it.puppet} --create
gem install bundler --no-rdoc --no-ri
bundle install --without system_tests"""
        }
      }
    }]}.collectEntries({ it })
  }

  version_matrix.each {
    try {
      stage("Ruby ${it.ruby} / Puppet ${it.puppet}") {
        dir("${baseDir}/puppet${it.puppet}_ruby${it.ruby}/${moduleDir}") {
<% if @configs.has_key?('ssh_credentials') -%>
          sshagent(credentials: ['<%= @configs['ssh_credentials'] %>']) {
<% end -%>
            withEnv([ "PUPPET_GEM_VERSION=~> ${it.puppet}" ]) {
              def env_checks = additional_checks.collect { check -> [check, {
                sh """#!/bin/bash -l
rvm use ${it.ruby}@${env.BUILD_TAG}_puppet${it.puppet}
bundle exec rake ${check}"""
              }]}.collectEntries({ it })
              parallel env_checks
            }
<% if @configs.has_key?('ssh_credentials') -%>
          }
<% end -%>
        }
      }
    }
    catch(err) {
      if (it.req) {
        currentBuild.result = 'FAILURE'
      }
    }
  }

  try {
    stage('Spec') {
      parallel version_matrix.collect {["Ruby ${it.ruby} / Puppet ${it.puppet}", {
        try {
          dir("${baseDir}/puppet${it.puppet}_ruby${it.ruby}/${moduleDir}") {
<% if @configs.has_key?('ssh_credentials') -%>
            sshagent(credentials: ['<%= @configs['ssh_credentials'] %>']) {
<% end -%>
              withEnv([ "PUPPET_GEM_VERSION=~> ${it.puppet}" ]) {
                sh """#!/bin/bash -l
rvm use ${it.ruby}@${env.BUILD_TAG}_puppet${it.puppet}
bundle exec rake spec"""
              }
<% if @configs.has_key?('ssh_credentials') -%>
            }
<% end -%>
          }
        } catch (err) {
          println "Caught error ${err} during Ruby ${it.ruby} / Puppet ${it.puppet}, req = ${it.req}"
          if (it.req) {
            println "Setting build result to FAILURE"
            currentBuild.result = 'FAILURE'
          }
          throw err
        }
      }]}.collectEntries({ it })
    }
  } catch (err) {
    println "Caught error ${err} during Spec stage"
  }

  try {
    stage('PDK Convert') {
      def versions = version_matrix.last()
      withEnv([ "PUPPET_GEM_VERSION=~> ${versions.puppet}" ]) {
        dir("${baseDir}/puppet${versions.puppet}_ruby${versions.ruby}/${moduleDir}") {
<% if @configs.has_key?('ssh_credentials') -%>
          sshagent(credentials: ['<%= @configs['ssh_credentials'] %>']) {
<% end -%>
            sh '''#!/bin/bash -l
rm -f Gemfile.lock
/usr/local/bin/pdk convert --force --skip-interview --template-url "ssh://git@github.umn.edu/msi/puppet-pdk-templates.git" --template-ref "master"
if [ ! -z "$(git status --porcelain)" ]; then
  if [ -z "$(git status --porcelain | grep -vF ' M metadata.json')" ]; then
    # only problem is metadata.json, see if it's only the pdk version
    git show HEAD:metadata.json | jq 'del(."pdk-version")' > .metadata.json.nopdk_pre
    jq 'del(."pdk-version")' metadata.json > .metadata.json.nopdk_post
    diff .metadata.json.nopdk_pre .metadata.json.nopdk_post
    if [[ $? -eq 0 ]]; then
      echo 'pdk convert only differs in pdk version used. This is okay.'
      exit 0
    fi
  fi
  cat convert_report.txt
  exit 1
fi'''
<% if @configs.has_key?('ssh_credentials') -%>
          }
<% end -%>
        }
      }
    }
  } catch (err) {
    currentBuild.result = 'FAILURE'
  }

  stage('Cleanup') {
    version_matrix.each {
      sh """#!/bin/bash -l
rvm use ${it.ruby}@${env.BUILD_TAG}_puppet${it.puppet}
rvm --force gemset delete ${env.BUILD_TAG}_puppet${it.puppet}"""
    }
    dir(baseDir) {
      deleteDir()
    }
  }

}
// vim: syn=groovy ts=2 sw=2 expandtab
